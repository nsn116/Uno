#BlueJ class context
comment0.params=
comment0.target=Deck()
comment0.text=\n\ Constructor\ for\ objects\ of\ the\ Deck\ class\ which\ initializes\ a\ fully\ populated\ array\ of\ Uno\ cards.\n
comment1.params=n
comment1.target=Deck(int)
comment1.text=\n\ A\ parameterized\ constructor\ for\ objects\ of\ the\ Deck\ class\ which\ declares\ an\ array\ of\ Uno\ cards\ that\ has\ a\ capacity\ to\ store\ as\ many\ cards,\ as\ passed\ as\ the\ parameter.\ \n\ \n\ @param\ n\ the\ integer\ passed\ as\ a\ parameter\ which\ determines\ the\ length\ of\ the\ Deck\ object\ to\ be\ created.\n
comment10.params=
comment10.target=Deck\ usedPileTransform()
comment10.text=\n\ If\ the\ game\ goes\ on\ for\ too\ long\ and\ there\ happens\ to\ be\ a\ stage\ where\ the\ pile\ gets\ over,\ then,\ as\ in\ any\ Uno\ game\ the\ played\ pile\ of\ cards\ is\ transformed\ into\ the\ new\ pile\ with\ only\ the\ top\n\ card\ remaining\ as\ part\ of\ the\ original\ played\ pile\ -\ This\ is\ what\ usedPileTransform\ accomplishes.\ this\ Deck\ now\ contains\ only\ the\ card\ which\ it\ had\ at\ its\ zeroeth\ position\ originally\ (the\ top\ card).\ \n\n\ @return\ a\ new\ deck\ which\ does\ not\ contain\ the\ top\ card\ or\ any\ card\ in\ the\ user's\ or\ computer's\ hand.\n
comment11.params=low\ high
comment11.target=int\ randomInt(int,\ int)
comment11.text=\n\ The\ randomInt\ method\ takes\ two\ integers,\ low\ and\ high,\ and\ returns\ a\ random\ integer\ x\ such\ that\ x\ is\ greater\ than\ or\ equal\ to\ low\ and\ x\ is\ also\ lesser\ than\ or\ equal\ to\ high.\n\ \n\ @param\ low\ lowest\ index\ of\ the\ range.\n\ @param\ high\ highest\ index\ of\ the\ range.\n\ @return\ the\ randomly\ chosen\ integer\ in\ the\ specified\ range.\n
comment12.params=playedDeck\ comp\ user
comment12.target=int\ sum(Deck,\ Deck,\ Deck)
comment12.text=\n\ sum\ returns\ the\ total\ number\ of\ Uno\ cards\ in\ the\ played\ deck,\ the\ user's\ hand\ and\ the\ the\ computer's\ hand.\n\ \n\ @param\ playedDeck\ the\ deck\ of\ cards\ which\ have\ been\ played.\n\ @param\ comp\ the\ computer's\ hand.\n\ @param\ user\ the\ user's\ hand.\n\ @return\ the\ sum\ of\ the\ lengths\ ofthe\ played\ deck,\ computer's\ hand\ and\ user's\ hand\ in\ the\ form\ of\ an\ integer.\n
comment13.params=deck\ n1\ n2
comment13.target=void\ swapCards(Uno[],\ int,\ int)
comment13.text=\n\ swapCards\ takes\ a\ deck\ (array\ of\ cards)\ and\ two\ indices,\ and\ switches\ or\ swaps\ the\ cards\ at\ those\ two\ locations.\n\ \n\ @param\ deck\ the\ deck\ in\ which\ the\ Uno\ card\ at\ the\ first\ index\ is\ switched\ or\ swapped\ with\ that\ at\ the\ second\ index.\n\ @param\ n1\ the\ index\ of\ the\ first\ card.\n\ @param\ n2\ the\ index\ of\ the\ second\ card.\n
comment2.params=low\ high
comment2.target=Deck\ subdeck(int,\ int)
comment2.text=\n\ subdeck\ creates\ a\ smaller\ deck\ in\ which\ only\ a\ few\ cards\ of\ this\ Deck\ are\ present.\n\ \n\ @param\ low\ lowest\ index\ of\ the\ range.\n\ @param\ high\ highest\ index\ of\ the\ range.\n\ \n\ @return\ a\ subdeck\ of\ this\ Deck\ if\ (high\ -\ low\ +\ 1)\ is\ greater\ than\ 0\ and\ null,\ if\ otherwise.\ \n
comment3.params=
comment3.target=void\ printDeck()
comment3.text=\n\ printDeck\ prints\ all\ the\ cards\ present\ in\ this\ Deck.\n
comment4.params=pile\ n
comment4.target=void\ drawCards(Deck,\ int)
comment4.text=\n\ drawCards\ draws\ the\ required\ number\ of\ cards\ form\ the\ pile\ and\ adds\ them\ to\ this\ Deck.\n\ \n\ @param\ pile\ the\ central\ pile\ of\ cards\ that\ haven't\ been\ played\ or\ belong\ to\ no\ one's\ hand.\n\ @param\ n\ the\ number\ of\ cards\ to\ be\ drawn.\n
comment5.params=card
comment5.target=void\ subdeckOverloaded(Uno)
comment5.text=\n\ subdeckOverloaded\ is\ an\ overloaded\ version\ of\ subdeck\ which\ returns\ a\ subdeck\ of\ this\ Deck.\ The\ subdeck\ consists\ of\ every\ card\ in\ this\ Deck\ except\ the\ card\ passed\ to\ it\ as\ an\ argument.\n\ \n\ @param\ card\ the\ card\ which\ is\ to\ be\ removed\ (or)\ the\ card\ except\ which\ the\ entire\ subdeck\ is\ to\ be\ made\ up\ of,\ from\ this\ Deck.\n
comment6.params=d
comment6.target=Deck\ merge(Deck)
comment6.text=\n\ merge\ merges\ two\ subdecks\ into\ either\ a\ bigger\ subdeck\ or\ a\ deck\ itself\ .\ It\ merges\ this\ Deck\ and\ the\ deck\ passed\ to\ it\ as\ a\ parameter.\n\ \n\ @param\ d\ the\ deck\ to\ be\ merged\ with\ this\ Deck.\n\ @return\ the\ merged\ Deck\ object.\n
comment7.params=
comment7.target=void\ sortdeck()
comment7.text=\n\ sortDeck\ arranges\ this\ Deck\ from\ the\ lowest\ card\ it\ contains\ to\ the\ highest\ card\ it\ contains.\ \ \n
comment8.params=lowIndex\ highIndex
comment8.target=int\ findIndexOfLowestCard(int,\ int)
comment8.text=\n\ findIndexOfLowestCard\ finds\ the\ index\ of\ the\ lowest\ card\ in\ a\ specified\ range\ of\ Uno\ cards\ in\ this\ Deck.\n\ \n\ @param\ lowIndex\ lowest\ index\ of\ the\ range.\n\ @param\ highIndex\ highest\ index\ of\ the\ range.\ \ \n\ @return\ the\ index\ of\ the\ lowest\ card\ in\ the\ specified\ range.\ \n
comment9.params=
comment9.target=void\ shuffleDeck()
comment9.text=\n\ shuffleDeck\ shuffles\ this\ Deck\ using\ the\ algorithm\ where\ a\ card\ at\ i\ is\ chosen\ and\ swapped\ with\ a\ card\ at\ a\ random\ number\ between\ i\ and\ length\ of\ the\ deck.\n
numComments=14
